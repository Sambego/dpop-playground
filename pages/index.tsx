import { ReactNode, useEffect, useState } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import DPoP, { generateKeyPair, KeyPair } from 'dpop';
import * as jose from 'jose'

import Step1 from '../components/steps/step1';
import Step2 from '../components/steps/step2';
import Step3 from '../components/steps/step3';
import Step4 from '../components/steps/step4';
import Step5 from '../components/steps/step5';
import Step6 from '../components/steps/step6';

import { getAuthorizationCode, getClientId } from '../helpers/randomData'
import { AUTHORIZATION_SERVER } from '../helpers/constants';
import { getDPoPPublicKeyThumbprint } from '../helpers/dpop';
import { getAccessToken } from '../helpers/accessToken';

import Header from '../components/header';
import Container from '../components/container';

const steps = [Step1, Step2, Step3, Step4];

const Home: NextPage = () => {
  const [step, setStep] = useState<number>(1);
  const [authorizationCode, setAuthorizationCode] = useState<string>('')
  const [authorizationServerKeyPair, setauthorizationServerKeyPair] = useState<jose.GenerateKeyPairResult>();
  const [accessToken, setAccessToken] = useState<string>('');
  const [DPoPKeyPair, setDPoPKeyPair] = useState<KeyPair>();
  const [accessTokenRequestDPoPProof, setaccessTokenRequestDPoPProof] = useState<string>('');
  const [clientId, setClientId] = useState<string>('');

  useEffect(() => {
    setAuthorizationCode(getAuthorizationCode());

    (async () => {
      setauthorizationServerKeyPair(await jose.generateKeyPair('ES256', {extractable: true}));
      setDPoPKeyPair(await generateKeyPair("ES256"));
      setClientId(getClientId())
    })();
  }, [])

  useEffect(() => {
    (async () => {
        if (DPoPKeyPair) {
          setaccessTokenRequestDPoPProof(await DPoP(DPoPKeyPair, `${AUTHORIZATION_SERVER}/token`, 'POST', ));
        }
    })();
  }, [DPoPKeyPair])
  
  const handleNextStep = ():void => {
    setStep(step + 1)
  }

  useEffect(() => {
    (async () => {
        if (authorizationServerKeyPair) {
            const DPoPPublicKeyThumbrint = await getDPoPPublicKeyThumbprint(DPoPKeyPair);
            setAccessToken(await getAccessToken(DPoPPublicKeyThumbrint, authorizationServerKeyPair, clientId));
        }
    })();
  }, [DPoPKeyPair, authorizationServerKeyPair])
  
  
  const renderSteps = (): Array<ReactNode> => {
    const steps: Array<ReactNode> = [
      <Step1 key="step1" handleNext={handleNextStep} activeStep={step} clientId={clientId}/>,
      <Step2 key="step2" handleNext={handleNextStep} activeStep={step} clientId={clientId}/>,
      <Step3 key="step3" authorizationCode={authorizationCode} handleNext={handleNextStep} activeStep={step}/>,
      // @ts-ignore
      <Step4 key="step4" proof={accessTokenRequestDPoPProof} DPoPPublicKey={DPoPKeyPair?.publicKey} handleNext={handleNextStep} activeStep={step}/>,
      // @ts-ignore
      <Step5 key="step5" authorizationCode={authorizationCode} accessToken={accessToken} proof={accessTokenRequestDPoPProof} authorizationServerPublicKey={authorizationServerKeyPair?.publicKey} handleNext={handleNextStep} activeStep={step}/>,
      <Step6 key="step6" accessToken={accessToken} DPoPKeyPair={DPoPKeyPair} handleNext={handleNextStep} activeStep={step}/>
    ];

    return steps.filter((node: ReactNode, index: number) => index < Number(step))
  }
  
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
       <Header />
        
        <Container>
          {renderSteps()}
        </Container>
      </main>
    </div>
  )
}

export default Home
