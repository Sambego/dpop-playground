import { ReactNode, useEffect, useState } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import DPoP, { generateKeyPair, KeyPair } from 'dpop';
import * as jose from 'jose'

import Step1 from '../components/steps/step1';
import Step2 from '../components/steps/step2';
import Step3 from '../components/steps/step3';
import Step4 from '../components/steps/step4';
import Step5 from '../components/steps/step5';
import Step6 from '../components/steps/step6';

import { getAuthorizationCode, getClientId } from '../helpers/randomData'
import { AUTHORIZATION_SERVER } from '../helpers/constants';
import { getDPoPPublicKeyThumbprint } from '../helpers/dpop';
import { getAccessToken } from '../helpers/accessToken';

import Header from '../components/header';
import Container from '../components/container';

const steps = [Step1, Step2, Step3, Step4];

const Home: NextPage = () => {
  const [step, setStep] = useState<number>(1);
  const [authorizationCode, setAuthorizationCode] = useState<string>('')
  const [authorizationServerKeyPair, setauthorizationServerKeyPair] = useState<jose.GenerateKeyPairResult>();
  const [accessToken, setAccessToken] = useState<string>('');
  const [DPoPKeyPair, setDPoPKeyPair] = useState<KeyPair>();
  const [accessTokenRequestDPoPProof, setaccessTokenRequestDPoPProof] = useState<string>('');
  const [clientId, setClientId] = useState<string>('');

  useEffect(() => {
    setAuthorizationCode(getAuthorizationCode());

    (async () => {
      setauthorizationServerKeyPair(await jose.generateKeyPair('ES256', {extractable: true}));
      setDPoPKeyPair(await generateKeyPair("ES256"));
      setClientId(getClientId())
    })();
  }, [])

  useEffect(() => {
    (async () => {
        if (DPoPKeyPair) {
          setaccessTokenRequestDPoPProof(await DPoP(DPoPKeyPair, `${AUTHORIZATION_SERVER}/token`, 'POST', ));
        }
    })();
  }, [DPoPKeyPair])
  
  const handleNextStep = ():void => {
    setStep(step + 1)
  }

  useEffect(() => {
    (async () => {
        if (authorizationServerKeyPair) {
            const DPoPPublicKeyThumbrint = await getDPoPPublicKeyThumbprint(DPoPKeyPair);
            setAccessToken(await getAccessToken(DPoPPublicKeyThumbrint, authorizationServerKeyPair, clientId));
        }
    })();
  }, [DPoPKeyPair, authorizationServerKeyPair])
  
  
  const renderSteps = (): Array<ReactNode> => {
    const steps: Array<ReactNode> = [
      <Step1 key="step1" handleNext={handleNextStep} activeStep={step} clientId={clientId}/>,
      <Step2 key="step2" handleNext={handleNextStep} activeStep={step} clientId={clientId}/>,
      <Step3 key="step3" authorizationCode={authorizationCode} handleNext={handleNextStep} activeStep={step}/>,
      // @ts-ignore
      <Step4 key="step4" proof={accessTokenRequestDPoPProof} DPoPPublicKey={DPoPKeyPair?.publicKey} handleNext={handleNextStep} activeStep={step}/>,
      // @ts-ignore
      <Step5 key="step5" authorizationCode={authorizationCode} accessToken={accessToken} proof={accessTokenRequestDPoPProof} authorizationServerPublicKey={authorizationServerKeyPair?.publicKey} handleNext={handleNextStep} activeStep={step}/>,
      <Step6 key="step6" accessToken={accessToken} DPoPKeyPair={DPoPKeyPair} handleNext={handleNextStep} activeStep={step}/>
    ];

    return steps.filter((node: ReactNode, index: number) => index < Number(step))
  }
  
  return (
    <div>
      <Head>
        <title>DPoP.info - Demonstrating Proof-of-Possession</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#99C794" />
        <meta name="msapplication-TileColor" content="#99C794" />
        <meta name="theme-color" content="#D8DEE9" />
        <meta property="og:title" content="DPoP.info - Demonstrating Proof-of-Possession" />
        <meta property="og:site_name" content="DPoP Info" />
        <meta property="og:url" content="https://dpop.info" />
        <meta property="og:description" content="DPoP (for Demonstrating Proof-of-Possession at the Application Layer) is an application-level mechanism for sender-constraining OAuth access and refresh tokens. It enables a client to prove the possession of a public/private key pair by including a DPoP header in an HTTP request. The value of the header is a JSON Web Token (JWT) [RFC7519] that enables the authorization server to bind issued tokens to the public part of a client's key pair. Recipients of such tokens are then able to verify the binding of the token to the key pair that the client has demonstrated that it holds via the DPoP header, thereby providing some assurance that the client presenting the token also possesses the private key. In other words, the legitimate presenter of the token is constrained to be the sender that holds and can prove possession of the private part of the key pair." />
        <meta property="og:type" content="" />
        <meta property="og:image" content="https://dpop.info/og.png"></meta>
      </Head>

      <main>
       <Header />
        
        <Container>
          {renderSteps()}
        </Container>
      </main>
    </div>
  )
}

export default Home
